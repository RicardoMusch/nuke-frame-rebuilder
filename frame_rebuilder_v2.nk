set cut_paste_input [stack 0]
version 11.2 v4
push $cut_paste_input
Group {
 name FrameRebuilder
 selected true
 xpos 361
 ypos 411
 lock_connections {{curve x1100 0}}
 addUserKnob {20 User l FrameRebuilder}
 addUserKnob {6 use_gpu l "Use GPU" t "Use the GPU function of the OFlow/Kronos nodes." -STARTLINE}
 use_gpu true
 addUserKnob {6 use_kronos l "Use Kronos" t "Use Kronos instead of OFlow.\nThis requires a NukeX license to be active." -STARTLINE}
 addUserKnob {6 flicker_compensation l "Flicker Compensation" t "If your sequence is flickering, turn this on to compensate for that." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 text1 l "" +STARTLINE T "1) Hit 'Reset' before beginning"}
 addUserKnob {22 reset l Reset T "\"Incorporate Reset Code from RichFrazer\"\nn = nuke.thisNode()\['inputframe']\nkt = nuke.thisNode()\['kt']\nko = nuke.thisNode()\['ko']\np = nuke.thisNode()\['passthrough']\nn.clearAnimated()\nkt.clearAnimated()\nko.clearAnimated()\nn.setAnimated()\nf = nuke.thisNode().firstFrame()\nl = nuke.thisNode().lastFrame() \nn.animation(0).setKey(f,f)\nn.animation(0).setKey(l,l)\np.setValue(0)\n\n\n\n\n\n\"Start Processing Groupnode Code\"\ntry:\n    groupNode = nuke.thisNode()\nexcept:\n    groupNode = nuke.selectedNode()\ngroupNode.begin()\n\n\n\n\nfor n in nuke.allNodes(\"OFlow2\"):\n    n\[\"input.first\"].setValue(f)\n    n\[\"input.last\"].setValue(l)\n    \n    n\[\"timingFrame2\"].setExpression(\"parent.ko\")\n    n\[\"vectorDetailLocal\"].setExpression(\"parent.vector_detail\")\n    n\[\"smoothnessLocal\"].setExpression(\"parent.smoothness\")\n    n\[\"resampleType\"].setExpression(\"parent.resampling\")\n    n\[\"flickerCompensation\"].setExpression(\"parent.flicker_compensation\")\n\n\n\nkronos = False\nfor n in nuke.allNodes(\"Kronos\"):\n    try:\n        n\[\"input.first\"].setValue(f)\n        n\[\"input.last\"].setValue(l)\n\n\n\n        n\[\"timingFrame2\"].setExpression(\"parent.ko\")\n        n\[\"vectorDetailLocal\"].setExpression(\"parent.vector_detail\")\n        n\[\"smoothnessLocal\"].setExpression(\"parent.smoothness\")\n        n\[\"resampleType\"].setExpression(\"parent.resampling\")\n        n\[\"flickerCompensation\"].setExpression(\"parent.flicker_compensation\")\n        kronos = True\n    except Exception as e:\n        kronos = False\n        print e\n\n\n\ngroupNode.end()\n\n\n\n\nif kronos == True:\n    groupNode\[\"use_kronos\"].setValue(1)\nif kronos == False:\n    groupNode\[\"use_kronos\"].setValue(0)\n    nuke.message(\"Disabled Kronos as no Kronos License is active.\\nUsing OFlow to rebuild frames.\")\n\n\n" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 text2 l "" +STARTLINE T "2) Add keys on frames that are good\n    Remove keys on frames to be rebuilt "}
 addUserKnob {3 inputframe l Frame}
 inputframe {{curve x1001 1001 x1250 1250}}
 addUserKnob {22 addkey l "Add Key" -STARTLINE T "n = nuke.thisNode()\['inputframe']\nn.setAnimated()\nt = nuke.frame()\nn.animation(0).setKey(t,t)\n"}
 addUserKnob {22 deletekey l "Delete key" -STARTLINE T "n = nuke.thisNode()\['inputframe']\nt = nuke.frame()\n#n.animation(0).removeKeyAt(t)\nn.removeKeyAt(t)"}
 addUserKnob {22 addall l "Keyframe all" T "n = nuke.thisNode()\['inputframe']\nn.setAnimated()\nf = nuke.thisNode().firstFrame()\nl = nuke.thisNode().lastFrame() \n\nn.animation(0).setKey(f,f)\nn.animation(0).setKey(l,l)\n\nfor i in xrange( f, l, 1 ):\n\tn.setValueAt(i, i)" +STARTLINE}
 addUserKnob {26 text3 l "" +STARTLINE T "(Do not change value of 'Frame' - leave it as frame number)"}
 addUserKnob {26 ""}
 addUserKnob {3 kt l INVISIBLE +INVISIBLE}
 kt 1250
 addUserKnob {3 ko l INVISIBLE +INVISIBLE}
 ko 98.66666666
 addUserKnob {3 passthrough l INVISIBLE +INVISIBLE}
 addUserKnob {26 text4 l "" +STARTLINE T "3) Hit 'Rebuild' to rebuild 'bad' frames"}
 addUserKnob {22 rebuild l Rebuild! T "k = nuke.thisNode()\['inputframe']\n\nif(k.isAnimated()):\n\t\t\t\n\ttOriginalCurve = k.animation(0)\n\t\t\t\t\n\ttKeys = tOriginalCurve.keys()\n\n\ti = 0\n\n\t\n\tkt = nuke.thisNode()\['kt']\n\n\tko  = nuke.thisNode()\['ko']\n\n\tkt.clearAnimated()\n\n\tko.clearAnimated()\n\n\tkt.setAnimated()\n\n\tko.setAnimated()\n\n\tfor tKey in tKeys:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\ttFrame = tKey.x \n\t\ttFrameY = tKey.y\n\n\t\tprint(\"key \" + str(i) + \" has x value \" + str(tFrame) + \", y value \" + str(tFrameY))\n\n\t\tko.setValueAt( i, tFrame )\n\n\t\tkt.setValueAt( tFrame, i )\n\n\t\ti = i+1\n\n\tkoKeys = ko.animation(0).keys()\n\n\tfor tKey in koKeys:\t\n\n\t\ttKey.interpolation = nuke.LINEAR\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\tktKeys = kt.animation(0).keys()\n\n\tfor tKey in ktKeys:\t\n\n\t\ttKey.interpolation = nuke.LINEAR\n\np = nuke.thisNode()\['passthrough']\np.setValue(1)" +STARTLINE}
 addUserKnob {20 settings l Settings}
 addUserKnob {7 vector_detail l "Vector Detail"}
 vector_detail 1
 addUserKnob {7 smoothness l Smoothness}
 smoothness 0.1
 addUserKnob {4 resampling l Resampling M {Bilinear Lanczos4 Lanczos6}}
 addUserKnob {20 about l About}
 addUserKnob {26 credit l "" -STARTLINE T "Rebuilds broken or missing frames using OFlow/Kronos\nAssumes that many of the frames are OK, but that bad\nframes are littered throughout. \n\nOriginal forked from Richard Frazer\n\nUpdated with Latest OFlow/Kronos nodes which will allow\nall channels in a stream to be processed allowing this tool\nto be used for fixing MultiLayer CG renders as well. \nIn addition it allows processing on the GPU."}
 addUserKnob {26 ""}
}
 Input {
  inputs 0
  name Input1
  xpos 197
  ypos -930
 }
 Dot {
  name Dot1
  xpos 231
  ypos -831
 }
set N88b79500 [stack 0]
 Dot {
  name Dot3
  xpos 426
  ypos -831
 }
 TimeWarp {
  lookup {{parent.kt}}
  time ""
  name TimeWarp2
  xpos 392
  ypos -730
 }
 Dot {
  name Dot4
  xpos 426
  ypos -622
 }
set N88317180 [stack 0]
 Kronos {
  retimedChannels all
  showLegacyMode false
  motionEstimation Regularized
  legacyModeNuke9 false
  name Kronos1
  xpos 461
  ypos -565
 }
push $N88317180
 OFlow2 {
  useGPUIfAvailable {{parent.use_gpu}}
  input.first 1001
  input.last 1250
  timing2 Frame
  timingFrame2 {{parent.ko}}
  vectorDetailLocal {{parent.vector_detail}}
  smoothnessLocal {{parent.smoothness}}
  resampleType {{parent.resampling}}
  Shutter 1
  Advanced 1
  flickerCompensation {{parent.flicker_compensation}}
  name OFlow2
  xpos 318
  ypos -560
 }
 Switch {
  inputs 2
  which {{parent.use_kronos}}
  name node_switch
  xpos 386
  ypos -480
 }
 Dot {
  name Dot2
  xpos 420
  ypos -396
 }
push $N88b79500
 Switch {
  inputs 2
  which {{parent.passthrough}}
  name Switch1
  xpos 197
  ypos -400
 }
 Output {
  name Output1
  xpos 197
  ypos -319
 }
end_group
